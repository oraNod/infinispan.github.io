<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://infinispan.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://infinispan.org/" rel="alternate" type="text/html" /><updated>2021-04-26T13:11:27+01:00</updated><id>https://infinispan.org/feed.xml</id><title type="html">Infinispan</title><subtitle>Infinispan is a distributed in-memory key/value data store with optional schema, available under the Apache License 2.0.</subtitle><entry><title type="html">Infinispan 12.1.0.Final</title><link href="https://infinispan.org/blog/2021/04/07/infinispan-12-1-0-final" rel="alternate" type="text/html" title="Infinispan 12.1.0.Final" /><published>2021-04-07T13:00:00+01:00</published><updated>2021-04-07T13:00:00+01:00</updated><id>https://infinispan.org/blog/2021/04/07/infinispan-12.1.0.Final</id><content type="html" xml:base="https://infinispan.org/blog/2021/04/07/infinispan-12-1-0-final">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a belated surprise in your chocolate egg this year is a brand new final release.
Infinispan 12.1 &lt;a href=&quot;https://en.wikipedia.org/wiki/Taedonggang&quot;&gt;Taedonggang&lt;/a&gt; includes a bunch of new features and fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;out-of-the-box-authorization-in-the-server&quot;&gt;Out-of-the-box authorization in the server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The biggest change is the fact that the server now enables authorization right from the start, including a set of predefined roles.
By default this only affects management ops and it can be easily disabled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Head over to &lt;a href=&quot;https://infinispan.org/docs/stable/titles/server/server.html#authorization&quot; class=&quot;bare&quot;&gt;https://infinispan.org/docs/stable/titles/server/server.html#authorization&lt;/a&gt; for details on this feature and how to tune it to your own needs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan can now load configuration as YAML, as well as XML and JSON.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;soft-index-file-store&quot;&gt;Soft-Index File Store&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Soft-Index File Store (or SIFS for short) is one of our file-based stores, and it has received a number of improvements such as segmentation, non-blocking and requiring no additional threads.
Additionally, if you are lucky enough to have some persistent memory hardware, this file-store can support it via the very awesome &lt;a href=&quot;https://github.com/jhalliday/mashona&quot;&gt;Mashona library&lt;/a&gt;.
We hope to make this our default file-store in the future (replacing the Single File Store).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;server-protocol-management&quot;&gt;Server protocol management&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now enable/disable protocol endpoints at runtime or use &lt;a href=&quot;https://infinispan.org/docs/stable/titles/server/server.html#endpoint_ipfilter&quot;&gt;IP filtering&lt;/a&gt; for fine-grained access control.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;console&quot;&gt;Console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The console is now fully aware of the server authorization roles (if enabled) and many fixes are included.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cli&quot;&gt;CLI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CLI is now available as &lt;a href=&quot;https://github.com/infinispan/infinispan-quarkus/releases&quot;&gt;native builds&lt;/a&gt; for Linux and MacOS.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cross-site-replication&quot;&gt;Cross Site Replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now enable automatic Cross Site &lt;a href=&quot;https://infinispan.org/docs/stable/titles/xsite/xsite.html#xsite_state_transfer-xsite&quot;&gt;state transfer&lt;/a&gt; for asynchronous backup strategy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring&quot;&gt;Spring&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our Spring Cache and Spring Session integration now allows user keys and values to be stored in &lt;a href=&quot;https://infinispan.org/docs/stable/titles/developing/developing.html#configuring_protobuf_encoding-data&quot;&gt;Protostream&lt;/a&gt; format.
However, full integration with the Infinispan Spring Boot Starter is landing in the next minor release. Stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;marshallingprotobuf&quot;&gt;Marshalling/ProtoBuf&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The latest ProtoStream release 4.4.0.Beta3 includes support for marshalling arrays and collections, built-in support for several community requested types (UUID, BigDEcimal,&amp;#8230;&amp;#8203;), a new method in ProtobufUtil for computing message size (without actually encoding the message) and a lot of bug fixes. This release also provides it’s own protobuf encoder and removes the dependency on protobuf-java artifact which was previously used for encoding the stream (without being exposed by the API).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;images&quot;&gt;Images&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now provide an  image containing a natively compiled version of the Infinispan CLI at quay.io/infinispan/cli&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;operator&quot;&gt;Operator&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to numerous fixes, the operator has added many new features. Most notably:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Grafana Dashboard&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Batch CR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom library support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom labels on Resources created by Operator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disable Authentication Option&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decouple user and operator endpoint authentication&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve made a lot of updates to our documentation this release, with lots more task-oriented content for new features and capabilities. Server credential stores, refactored authorization (RBAC) configuration, Operator Batch CR, Backup and Restore CRs, custom code deployments, automatic cross-site state transfer, querying values, configuring Protobuf annotations for marshalling… Hopefully you’ll find all the answers you need for using Infinispan 12.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the big highlights for docs in this release are the new tabbed configuration snippets we’re going to start adding. Right now you can find an example of tabbed configuration in the REST API docs here: &lt;a href=&quot;https://infinispan.org/docs/dev/titles/rest/rest.html#cache_configuration&quot; class=&quot;bare&quot;&gt;https://infinispan.org/docs/dev/titles/rest/rest.html#cache_configuration&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve also done a lot of housekeeping in this release to make sure configuration examples are up to date and valid. In the next release you can expect to see more improvements there as well as a new title to improve our documentation around encoding and how Infinispan uses Protobuf.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, thanks for reading and get in touch if you have comments, feedback, or suggestions on our documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes-and-upgrading&quot;&gt;Release notes and upgrading&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the detailed &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12353337E&quot;&gt;release notes&lt;/a&gt; to see what has changed since CR1.
If you are upgrading from a previous version of Infinispan, please checkout our &lt;a href=&quot;https://infinispan.org/docs/stable/titles/upgrading/upgrading.html&quot;&gt;Upgrading guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;What&amp;#8217;s next ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our next release, 13.0, should happen during the summer, and will hopefully introduce a new API which will make using Infinispan much easier, as well as a number of other improvements across the board. As usual, look out for blog postings about upcoming highlights. If you&amp;#8217;d like to contribute, just get in touch.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Introducing WildFly Clustering Spring Session</title><link href="https://infinispan.org/blog/2021/03/16/new-infinispan-spring-session" rel="alternate" type="text/html" title="Introducing WildFly Clustering Spring Session" /><published>2021-03-16T12:00:00+00:00</published><updated>2021-03-16T12:00:00+00:00</updated><id>https://infinispan.org/blog/2021/03/16/wildfly-clustering-spring-session</id><content type="html" xml:base="https://infinispan.org/blog/2021/03/16/new-infinispan-spring-session">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week I released version 3.0.0.Final of wildfly-clustering-spring-session, a new Spring Session implementation based on WildFly&amp;#8217;s distributed HttpSession manager and Infinispan.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;doesnt-infinispan-already-provide-a-spring-session-implementation&quot;&gt;Doesn&amp;#8217;t Infinispan already provide a Spring Session implementation?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://infinispan.org/docs/stable/titles/integrating/integrating.html#spring_externalize_sessions&quot;&gt;Yes, it does.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan&amp;#8217;s existing Spring Session implementation stores instances of &lt;code&gt;org.springframework.session.MapSession&lt;/code&gt; into a Spring cache, which is backed by either an embedded or remote cache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, like many &lt;code&gt;MapSession&lt;/code&gt; based &lt;code&gt;SessionRepository&lt;/code&gt; implementations, it suffers from a common set of problems/limitations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;MapSession&lt;/code&gt; object, including all session metadata and attributes must be serialized and replicated/persisted on every request, regardless of the extent to which the session was modified.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Because Spring Session triggers session persistence from a &lt;code&gt;ServletFilter&lt;/code&gt;, this cost is borne per request.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since each request for a given session operates on a copy of the &lt;code&gt;MapSession&lt;/code&gt;, and since the &lt;code&gt;MapSession&lt;/code&gt; is not persisted/replicated until the end of the request:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Session modifications in one requests are not visible to concurrent requests for the same session.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A given session modification can be overwritten by a previous modification of the same session from a concurrent request if that request finishes first.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Session attributes implementing &lt;code&gt;HttpSessionActivationListener&lt;/code&gt; are never notified before/after they are marshalled/unmarshalled.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;wildfly-clustering-spring-session is implemented as a Spring &lt;code&gt;SessionRepository&lt;/code&gt; facade to a container-independent &lt;code&gt;SessionManager&lt;/code&gt; implementation that persists session attributes and metadata to either an embedded Infinispan cache or a remote Infinispan server cluster via HotRod.
This grants all of the features to Spring Session that one would normally expect when deploying a distributed web application to WildFly, including:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Minimal persistence payloads using configurable persistence granularity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consistent view of a given session from multiple concurrent request threads on a given server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mutable session attribute semantics (emulates the semantics of local session manager)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ability to treat specific session attributes as immutable&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configurable limit for the number of active sessions to retain in memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Proper &lt;code&gt;HttpSessionActivationListener&lt;/code&gt; notifications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configurable session attribute marshaller (ProtoStream, JBoss Marshalling, or Java Serialization)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-do-i-use-it&quot;&gt;How do I use it?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example, we&amp;#8217;ll use a remote Infinispan cluster containing a single member, deployed to the localhost, using its default configuration.
See the project &lt;a href=&quot;https://github.com/wildfly-clustering/wildfly-clustering-spring-session/blob/master/README.md&quot;&gt;README&lt;/a&gt; for details on the available configuration annotations and their attributes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Create a class containing the session repository configuration, for example:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@org.wildfly.clustering.web.spring.hotrod.annotation.EnableHotRodHttpSession \
(@HotRod(uri = &quot;hotrod://127.0.0.1:11222&quot;), manager = @SessionManager(granularity = ATTRIBUTE))
public class Config {
  // ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure your &lt;code&gt;/WEB-INF/applicationContext.xml&lt;/code&gt; will process your configuration annotation:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd&quot;&amp;gt;
  &amp;lt;context:annotation-config/&amp;gt;
&amp;lt;/beans&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an application initializer class that will auto-register the requisite servlet filters required by Spring Session:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MyHttpSessionApplicationInitializer extends AbstractHttpSessionApplicationInitializer {
  public MyHttpSessionApplicationInitializer() {
    // Do not call super constructor (see project README for details)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;@WebListener&lt;/code&gt; that bootstraps our session repository configuration:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@javax.servlet.annotation.WebListener
public class MyContextLoaderListener extends org.wildfly.clustering.web.spring.context.ContextLoaderListener {
  public MyContextLoaderListener() {
    super(Config.class);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deploying your application will automatically create a new cache instance in the Infinispan cluster named according to the the host and context of the web application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;can-i-use-wildfly-clustering-spring-session-outside-of-wildfly&quot;&gt;Can I use WildFly clustering Spring Session outside of WildFly?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course!
Like most Spring Session repository implementations, it is meant to work with any implementation of the Jakarta Servlet 4.0 specification.
The project &lt;a href=&quot;https://github.com/wildfly-clustering/wildfly-clustering-spring-session&quot;&gt;README&lt;/a&gt; contains sample instructions for installing on Tomcat.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;where-can-i-find-it&quot;&gt;Where can I find it?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the source code on &lt;a href=&quot;https://github.com/wildfly-clustering/wildfly-clustering-spring-session&quot;&gt;github&lt;/a&gt;.
Contributions are always welcome!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;File any issues with the &lt;a href=&quot;https://github.com/wildfly-clustering/wildfly-clustering-spring-session/issues&quot;&gt;github issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Checkout the &lt;a href=&quot;https://github.com/wildfly-clustering/wildfly-clustering-spring-session/blob/master/README.md&quot;&gt;README&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Paul Ferraro&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Paul Ferraro</name></author><category term="spring" /><category term="spring session" /><category term="httpsession" /><category term="wildfly" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan 12.0.1.Final “Lockdown”</title><link href="https://infinispan.org/blog/2021/02/12/infinispan-12-0-1" rel="alternate" type="text/html" title="Infinispan 12.0.1.Final “Lockdown”" /><published>2021-02-12T12:00:00+00:00</published><updated>2021-02-12T12:00:00+00:00</updated><id>https://infinispan.org/blog/2021/02/12/infinispan-12.0.1.Final</id><content type="html" xml:base="https://infinispan.org/blog/2021/02/12/infinispan-12-0-1">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;we hope you&amp;#8217;ve been enjoying all the new goodies included in our latest major release, Infinispan 12.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now have a brand new micro release for you which addresses a number of issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following list shows what we have fixed:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;component-upgrade&quot;&gt;Component Upgrade&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12729&quot;&gt;ISPN-12729&lt;/a&gt; - Upgrade console to 0.13.1.Final&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;enhancement&quot;&gt;Enhancement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12370&quot;&gt;ISPN-12370&lt;/a&gt; - Implement proper form login and digest login&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12636&quot;&gt;ISPN-12636&lt;/a&gt; - Implicit connectors for the single-port endpoint&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12718&quot;&gt;ISPN-12718&lt;/a&gt; - Add addtional DEBUG logs to Backup/Restore operations&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;feature-request&quot;&gt;Feature Request&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12660&quot;&gt;ISPN-12660&lt;/a&gt; - Add property to disable test execution&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bug&quot;&gt;Bug&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12548&quot;&gt;ISPN-12548&lt;/a&gt; - Replicated cache get ignores value in zero-capacity nodes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12651&quot;&gt;ISPN-12651&lt;/a&gt; - CacheEntryCloudEventsTest test failures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12654&quot;&gt;ISPN-12654&lt;/a&gt; - Get entry broken in protobuf caches&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12658&quot;&gt;ISPN-12658&lt;/a&gt; - Fix IracWriteSkewTest test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12659&quot;&gt;ISPN-12659&lt;/a&gt; - StatsTest random failures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12661&quot;&gt;ISPN-12661&lt;/a&gt; - Licenses are not properly generated in console&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12662&quot;&gt;ISPN-12662&lt;/a&gt; - Functional commands break in replicated caches on zero-capacity nodes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12663&quot;&gt;ISPN-12663&lt;/a&gt; - LocalIndexSyncStateTransferTest random failures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12666&quot;&gt;ISPN-12666&lt;/a&gt; - ReplicationIndexTest random failures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12667&quot;&gt;ISPN-12667&lt;/a&gt; - GlobalState incompatibility between 11.x and 12.x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12669&quot;&gt;ISPN-12669&lt;/a&gt; - Tests failing due to relying on published images&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12700&quot;&gt;ISPN-12700&lt;/a&gt; - CLI Batch files returns exit code 0 on error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12709&quot;&gt;ISPN-12709&lt;/a&gt; - Cannot retrieve the keyset of a cache (ISPN000287)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12710&quot;&gt;ISPN-12710&lt;/a&gt; - IllegalArgumentException in VoidResponseCollector: Self-suppression not permitted&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12716&quot;&gt;ISPN-12716&lt;/a&gt; - Hot Rod iteration shouldn&amp;#8217;t require ADMIN permission&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12719&quot;&gt;ISPN-12719&lt;/a&gt; - When a value is json but not protobuf the console fails&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12724&quot;&gt;ISPN-12724&lt;/a&gt; - Hot Rod client has too many Elytron dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;task&quot;&gt;Task&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12681&quot;&gt;ISPN-12681&lt;/a&gt; - Upgrade logo in Operator Hub&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ryan Emerson</name></author><category term="release" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan 12.0.0.Final</title><link href="https://infinispan.org/blog/2021/01/25/infinispan-12-final" rel="alternate" type="text/html" title="Infinispan 12.0.0.Final" /><published>2021-01-25T12:00:00+00:00</published><updated>2021-01-25T12:00:00+00:00</updated><id>https://infinispan.org/blog/2021/01/25/infinispan-12.0.0.Final</id><content type="html" xml:base="https://infinispan.org/blog/2021/01/25/infinispan-12-final">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;infinispan-12-0-0-final&quot;&gt;Infinispan 12.0.0.Final&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;we hope you, your families and colleagues are doing well in these trying times.
We&amp;#8217;ve been working hard over the last few months to bring you a brand-new release of Infinispan. Infinispan 12, aptly codenamed &lt;a href=&quot;https://kildarebrewing.ie/Lockdown-IPA-2-0-5-7-12-Pack-p191649230&quot;&gt;Lockdown&lt;/a&gt; comes loaded with a number of notable features as well as the usual slew of fixes and cleanups.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;indexing-and-search&quot;&gt;Indexing and Search&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our good friends over at &lt;a href=&quot;http://hibernate.org/search/&quot;&gt;Hibernate Search&lt;/a&gt; have been working hard on delivering an awesome
&lt;a href=&quot;https://in.relation.to/2020/12/11/hibernate-search-6-0-0-Final/&quot;&gt;new release&lt;/a&gt; and have also helped us integrate it in Infinispan. This is not
just an upgrade: we have taken the opportunity to evolve our indexing configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upgraded to Hibernate Search 6, that brings support for Lucene 8 indexes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better indexing performance out of the box&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New statistics API, covering indexed, non-indexed and hybrid queries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Introduced strong typed indexing configuration that replaces the string key/value properties.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Head over to the much improved &lt;a href=&quot;https://infinispan.org/docs/stable/titles/developing/developing.html#search_api&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We introduced a couple of improvements to the configuration API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Runtime creation of templates: the remote APIs now allow creating configuration templates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configuration Fragments: when creating caches and templates via the remote APIs, you no longer need to wrap their configuration in the
&lt;code&gt;&amp;lt;infinispan&amp;gt;&amp;lt;cache-container&amp;gt;&amp;#8230;&amp;#8203;&amp;lt;/cache-container&amp;gt;&amp;lt;/infinispan&amp;gt;&lt;/code&gt; elements, but you can simply use the cache definition directly, e.g.:
&lt;code&gt;&amp;lt;distributed-cache name=”mycache”/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;marshalling&quot;&gt;Marshalling&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A new &lt;code&gt;@ProtoAdapter&lt;/code&gt; annotation has been added to ProtoStream for generating &lt;code&gt;.proto&lt;/code&gt; files and marshallers for third party classes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SerializationContextInitializer&lt;/code&gt; implementations are automatically discovered and configured via Java ServiceLoader.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User types are now fully isolated from Infinispan internal context.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cross-site-replication&quot;&gt;Cross Site Replication&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our work on improving asynchronous cross-site replication continues with the following improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a new SPI for merging conflicting values: if two (or more) write operations happen simultaneously in different sites, the conflict is detected and the SPI is invoked to merge the values. Merge policies determine which action will be taken in case of conflict between updates of different sites. Some predefined merge policies can be found
&lt;a href=&quot;https://docs.jboss.org/infinispan/12.0/apidocs/org/infinispan/xsite/spi/XSiteMergePolicy.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exponential back-off added for network failures: ff the network between the sites disconnects, Infinispan will retry less frequently before giving up. It helps reduce the CPU utilization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatic disconnection if the cache configuration does not exist or is incorrect: if Infinispan tries to backup to a remote site and the remote site doesn’t have the cache defined, the remote site is automatically taken offline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Internal code improvements: the code is now non-blocking to reduce the CPU usage.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://infinispan.org/docs/stable/titles/xsite/xsite.html&quot;&gt;cross-site replication documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;server&quot;&gt;Server&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;backuprestore&quot;&gt;Backup/Restore&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A backup archive, that contains container resources (caches, cache templates, counters, Protobuf schemas, server tasks)  currently stored in the cache manager, can now be created. The backup archive can then be used to restore Infinispan clusters content after a restart or migration. This feature is exposed via the REST endpoint, however backups can also be created via the Infinispan CLI or with Backup/Restore CRs when using the operator.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;credential-stores&quot;&gt;Credential Stores&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To protect sensitive text strings, such as passwords, in the server configuration, you can add them to a credential keystore and reference them. You can then configure the server to decrypt passwords for establishing connections with services such as databases or LDAP directories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;lt;security&amp;gt;
   &amp;lt;credential-stores&amp;gt;
      &amp;lt;credential-store name=&quot;credentials&quot; path=&quot;credentials.pfx&quot;&amp;gt;
         &amp;lt;clear-text-credential clear-text=&quot;secret&quot;/&amp;gt;
      &amp;lt;/credential-store&amp;gt;
   &amp;lt;/credential-stores&amp;gt;
&amp;lt;/security&amp;gt;
&amp;lt;data-sources&amp;gt;
   &amp;lt;data-source name=&quot;postgres&quot; jndi-name=&quot;jdbc/postgres&quot;&amp;gt;
      &amp;lt;connection-factory driver=&quot;org.postgresql.Driver&quot;
                      username=&quot;dbuser&quot;
                      url=&quot;jdbc:postgresql:database&quot;&amp;gt;
  &amp;lt;credential-reference store=&quot;credentials&quot; alias=&quot;dbpassword&quot;/&amp;gt;
      &amp;lt;/connection-factory&amp;gt;
   &amp;lt;/data-source&amp;gt;
&amp;lt;/data-sources&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;multiple-endpoints&quot;&gt;Multiple endpoints&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The server now allows definining multiple single-port endpoints, each one mapped to a separate socket binding and with its own security realm. This is useful if you want to expose an admin endpoint on an internal, management-only network as well as an endpoint for application uses.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;optional-authentication-for-metrics-endpoint&quot;&gt;Optional authentication for metrics endpoint&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, the Prometheus-compatible metrics endpoint, published at &lt;a href=&quot;http://infinispan:11222/metrics&quot; class=&quot;bare&quot;&gt;http://infinispan:11222/metrics&lt;/a&gt;, used the same security semantics as the single port endpoint. It&amp;#8217;s now possible to allow anonymous connections to this endpoint, to simplify integration with your Prometheus scraper.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;custom-server-paths&quot;&gt;Custom server paths&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s now possible to start the server by overriding each of the paths individually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;server.sh -Dinfinispan.server.config.path=... \
          -Dinfinispan.server.log.path=... \
          -Dinfinispan.server.data.path=... \
          -Dinfinispan.server.lib.path=...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, the server library path now supports multiple directories which will be scanned recursively for both JARs and bare resources such as property files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;near-caches-with-bloom-filter&quot;&gt;Near caches with bloom filter&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The remote client has near caches that allow for values retrieved from the remote server to be cached locally on the client. This works great for workloads that are primarily read only. However, to provide consistency we have to listen to remote modification/removal events from the server, which can make work loads with a lot of writes not scale. As such we are introducing bloom filter assisted notifications that will reduce the amount of modification/removal events received from the server and thus would increase the scalability of write heavy applications using the near cache. This needs to be enabled in addition to near caching, which can be done via the client configuration xml or programmatic classes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;distributed-tracing&quot;&gt;Distributed tracing&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now integrate Infinispan&amp;#8217;s server with OpenTracing to perform distributed tracing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Only track Hot Rod cache write requests (i.e. no counters, multimap etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the OpenTracing implementation via the &lt;code&gt;infinispan.opentracing.factory.class&lt;/code&gt; and &lt;code&gt;infinispan.opentracing.factory.method&lt;/code&gt; system properties.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An OpenTracing implementation (is not included: instead it must be added to the server/lib directory (for example: the Jaeger OpenTracing implementation).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cli&quot;&gt;CLI&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;benchmark-tool&quot;&gt;Benchmark tool&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CLI now includes a small convenience benchmark tool which allows you to measure latency and throughput of an Infinispan server using a specific configuration. You can use this when sizing resources based on your requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;native-build&quot;&gt;Native build&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CLI is available as a native build, thanks to &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt;. The binaries for Linux, Mac and Windows can be found &lt;a href=&quot;https://github.com/infinispan/infinispan-quarkus/releases/tag/12.0.0.Final&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;kubernetes-cli&quot;&gt;Kubernetes CLI&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When installing the native CLI as &lt;code&gt;kubectl-infinispan&lt;/code&gt;, the CLI gains additional functionality to control the Infinispan operator, simplifying many operations. This includes the ability to install and uninstall the operator, create and delete Infinispan clusters and obtain information about various resources.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;configuration-improvements&quot;&gt;Configuration improvements&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CLI can persist some configuration properties which you wish to apply to all your sessions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;autoconnect-url&lt;/code&gt;: Specifies the URL to which the CLI automatically connects on startup.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;autoexec&lt;/code&gt;: Specifies the path of a CLI batch file to execute on startup.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;truststore&lt;/code&gt;: Specifies the path of a truststore to validate server certificates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;trustall&lt;/code&gt;: Specifies whether to trust all server certificates without supplying a trust store.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;console&quot;&gt;Console&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This version includes a new version of the web console, including mainly fixes, but also the ability to finally view cache entries and their
details:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/console12-0.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/console12-0.png&quot; alt=&quot;Cache entries&quot; width=&quot;550&quot; height=&quot;367&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/console12-1.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/console12-1.png&quot; alt=&quot;Key types&quot; width=&quot;512&quot; height=&quot;210&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/console12-2.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/console12-2.png&quot; alt=&quot;Integer keys&quot; width=&quot;550&quot; height=&quot;226&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cloud-events-integration&quot;&gt;Cloud Events integration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan &lt;a href=&quot;https://cloudevents.io/&quot;&gt;CloudEvents&lt;/a&gt; integration is a new experimental module which converts Infinispan events to CloudEvents events and sends them to a Kafka topic in structured mode. This allows Infinispan be further used as a Knative source.
There are two broad kinds of events:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cache entry modifications: created, updated, removed, expired&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Audit events: user login, access denied&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A natively compiled version of the CLI is now available as a container via the &lt;a href=&quot;https://quay.io/repository/infinispan/cli&quot;&gt;infinispan/cli&lt;/a&gt; image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The server images have also added support for configuring zero-capacity as well as allowing JGroups properties to be overridden at runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;operator&quot;&gt;Operator&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The operator continues to improve and evolve so that installing and managing Infinispan clusters on Kubernetes/OpenShift is a breeze:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data Backup and Restore are available via CR.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cross site improvements:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Access to remote cluster k8s API is no longer mandatory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Manual configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Namespaces can be different.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multinamespace and global installation mode.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLS can be disabled via CR configuration, even in environments where certificate management is built-in (e.g. OpenShift).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for the Quarkus native Infinispan image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anti-affinity configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Documentation for configuring cluster transport was overhauled in Infinispan 12. We made numerous changes, based on direct feedback from the community, to our JGroups content. We also added details on how to configure SYM_ENCRYPT and ASYM_ENCRYPT protocols, which were previously available only in the JGroups documentation set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can find new chapters on Configuring Cluster Transport in the Server Guide and Embedding Infinispan Guide. The details for JGroups encryption are also available in the guide for Securing Infinispan.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Off-Heap configuration has often been misunderstood and we’ve had several questions about what it actually means to store data in native memory outside the JVM heap. To address these questions, and spell out some of the benefits and potential downsides of using off-heap storage, we’ve added some conceptual information to our Configuration Guide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our documentation on Configuring Infinispan to Marshall Java Objects is also updated in an effort to improve clarity and be more task-oriented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Along with all the refactoring and improvements that have been made to the Search API, we’ve made some improvements to our documentation for Querying Values in Infinispan Caches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lastly, we noticed that the documentation for Clustered Locks was a little out of date and potentially confusing so we spent time to rework that content to make sure it’s accurate.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, the Infinispan team hope you find the documentation useful and complete. We’d love to hear from you and
really value feedback from our community. If you think something is missing from the docs or spot a correction,
please get in touch and we’ll get on it straight away.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other&quot;&gt;Other&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We have decided to adopt &lt;a href=&quot;https://github.com/conscious-lang/conscious-lang-docs&quot;&gt;Conscious language&lt;/a&gt; in Infinispan, both in our code and in our documentation. For example, Infinispan&amp;#8217;s way of configuring which classes are allowed to be marshalled/unmarshalled is now called &lt;em&gt;allow list&lt;/em&gt;. If you find other places where we are using inappropriate terms, please don&amp;#8217;t hesitate to contact us.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We’ve added some UI writing guidelines and Infinispan terminology to our Contributor’s Guide in an effort to create a consistent user experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As you may have noticed, our website has gone through some extensive redesign.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bye bye OSGI (it even rhymes !): we&amp;#8217;ve removed support for OSGi since it was quite a maintenance burden.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes-and-upgrading&quot;&gt;Release notes and upgrading&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the detailed &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12345018&quot;&gt;release notes&lt;/a&gt; to see what has changed since CR1.
If you are upgrading from a previous version of Infinispan, please checkout our &lt;a href=&quot;https://infinispan.org/docs/stable/titles/upgrading/upgrading.html&quot;&gt;Upgrading guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;What&amp;#8217;s next ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our next release, 12.1, will be a quick one, mostly focused on polishing and small API improvemnets, before we move on to bigger things. As usual, look out for blog postings about upcoming highlights. If you&amp;#8217;d like to contribute, just get in touch.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><summary type="html">Infinispan 12.0.0.Final</summary></entry><entry><title type="html">Infinispan 12.0.0.Dev03</title><link href="https://infinispan.org/blog/2020/09/08/infinispan-12" rel="alternate" type="text/html" title="Infinispan 12.0.0.Dev03" /><published>2020-09-08T13:00:00+01:00</published><updated>2020-09-08T13:00:00+01:00</updated><id>https://infinispan.org/blog/2020/09/08/infinispan-12.0.0.Dev03</id><content type="html" xml:base="https://infinispan.org/blog/2020/09/08/infinispan-12">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 12 development release 03 is here!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cross-site-replication&quot;&gt;Cross Site Replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the new asynchronous cross-site replication algorithm introduced in Infinispan 11, this release brings
a long desired feature: &lt;strong&gt;conflict resolution&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is possible to configure a merge policy where, in case of conflict between updates of different sites, the value
can be merged. Some predefined merge policies can be found
&lt;a href=&quot;https://docs.jboss.org/infinispan/12.0/apidocs/org/infinispan/xsite/spi/XSiteMergePolicy.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the docs for more &lt;a href=&quot;https://infinispan.org/docs/dev/titles/xsite/xsite.html#conflict_resolution-xsite&quot;&gt;information about conflict resolution&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Performance improvement&lt;/div&gt;
&lt;p&gt;Another small improvement has been made to cross-site replication in this release.
When sites get requests targeting caches that don&amp;#8217;t exist or aren&amp;#8217;t started,
sender sites stop retrying the requests, which takes the backup location offline.
Administrators must then bring the sites back online and perform state transfer to sync possible
out-of-date data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;infinispan-server&quot;&gt;Infinispan Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This version includes a new version of the web console, including mainly fixes, but also the ability to filter
between Strong and Weak counters and to remove counters from the list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/ispnDev03console1.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/ispnDev03console1.png&quot; alt=&quot;Console Counters Filter&quot; width=&quot;550&quot; height=&quot;400&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/ispnDev03console2.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/ispnDev03console2.png&quot; alt=&quot;Console Counters Remove Button&quot; width=&quot;550&quot; height=&quot;400&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/ispnDev03console3.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/ispnDev03console3.png&quot; alt=&quot;Console Counters Remove Modal&quot; width=&quot;550&quot; height=&quot;400&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12347011&quot;&gt;release notes&lt;/a&gt; to see what has changed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://infinispan.org/docs/dev/index.html&quot;&gt;Our documentation has been updated&lt;/a&gt; with some additional content as well as improvements for clarity and
technical accuracy, notably:
* Infinispan Operator Guide
* Server Guide
* Guide to Cross-Site Replication
* Security Guide&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, the Infinispan team hope you find the documentation useful and complete. We’d love to hear from you and
really value feedback from our community. If you think something is missing from the docs or spot a correction,
please get in touch and we’ll get on it straight away.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12347011&quot;&gt;release notes&lt;/a&gt; to see what has changed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Katia Aresti</name></author><category term="release" /><category term="development" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Non Blocking Journey</title><link href="https://infinispan.org/blog/2020/08/31/nonblocking_nearing" rel="alternate" type="text/html" title="Non Blocking Journey" /><published>2020-08-31T13:00:00+01:00</published><updated>2020-08-31T13:00:00+01:00</updated><id>https://infinispan.org/blog/2020/08/31/nonblocking_nearing</id><content type="html" xml:base="https://infinispan.org/blog/2020/08/31/nonblocking_nearing">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As many you are probably aware recent trends have shown that making applications non blocking
provides quite a few benefits allowing for greater scalability with less resources. Infinispan
has been written and rewriting parts to take advantage of this as we can for
both embedded and server use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;before-infinispan-11&quot;&gt;Before Infinispan 11&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Server has always utilized netty, however we may not have been the best about
ensuring we didn&amp;#8217;t block the event loop.
The HotRod Client in 9.2.0 also utilizes netty to provide for non blocking operations.
The internal embedded interceptors were rewritten in 9.0.0 to provide for non blocking support for
internal cache operations, which include put/get.
Cache store operations in 10.0.0 were offloaded to a blocking thread pool to provide non
blocking support.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;infinispan-11-non-blocking-changes&quot;&gt;Infinispan 11 Non Blocking Changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the newest release we have rewritten lots of the internals of Infinispan to take advantage
of non blocking as much as possible.
The amount of changes is quite large and a bit hard to describe them all in this blog post.
The various JIRA can be seen from &lt;a href=&quot;https://issues.redhat.com/browse/ISPN-10309&quot; class=&quot;bare&quot;&gt;https://issues.redhat.com/browse/ISPN-10309&lt;/a&gt;,
which isn&amp;#8217;t even complete yet despite how many different changes we have done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The persistence SPI was completely rewritten in 11 with non blocking in mind as well and this will
be covered in a future post as it has much more detailing it.
For now you can rest assure that all prior stores will still work, however they may have or
can be optimized to take into account non blocking support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conversions&quot;&gt;Conversions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pretty much every module in the Infinispan code base has been changed to support non blocking.
If code relies upon an API that is blocking that is known to be blocking, we offload those calls
to a blocking thread pool to ensure we never block the non blocking thread.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately some modules have not yet been updated and those are ones related to query.
Query is in the middle of a giant refactoring and doing so would have caused massive
conflicts and thus has been delayed to Infinispan 12.
The server works around this by ensuring write operations performed upon a cache with
query are always done in a blocking thread to ensure safety.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;thread-pools&quot;&gt;Thread Pools&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan utilizes various thread pools for handling of operations.
This table details how many thread pools each version of
Infinispan can have.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Thread Pools&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Version&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Embedded&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Server&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ISPN 10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ISPN 11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see there is more than a 50 percent reduction of the number of thread pools in
both embedded and server modes. This in turn has allowed for a reduction of the default
number of threads as well as seen in the next table. Note that N is how many cores that
are available to the JVM.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Maximum Default Thread Count&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Version&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Embedded&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Server&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ISPN 10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;310 + N&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;470 + (2 * N)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ISPN 11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;150 + (2 * N)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;150 + (4 * N)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After this consolidation we have non blocking and blocking thread pools.
As you can see this allows us to reduce the maximum number of threads in embedded by about half and
the server to a third of what it used to be before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The server has an additional thread pool for the netty event loop and unfortunately we cannot
consolidate this thread pool, but it is planned for Infinispan 12, which will get us to the
same number of threads and thread pools for both embedded and server modes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that this doesn&amp;#8217;t talk about the JGroups thread pool as this is unchanged and is the same.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;blockhound&quot;&gt;BlockHound&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are familiar with making code non blocking it can be a very difficult task as even the
most mundane call can be hiding something blocking, even if it is very brief.
We could write something to do detect such calls, but there is already an open source tool that
does exactly what we needed.
This tool is BlockHound, which can detect blocking calls at runtime.
More information about it can be found at &lt;a href=&quot;https://github.com/reactor/BlockHound&quot; class=&quot;bare&quot;&gt;https://github.com/reactor/BlockHound&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan takes advantage of blockhound in that we configure it at the module level.
This allows the end user to even add block hound with Infinispan in embedded mode
and it should work to test out to ensure that interactions with Infinispan are not blocking
when needed.
Note that we do not yet support block hound for the client, despite many methods
are not blocking today.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-remains-for-infinispan-12&quot;&gt;What remains for Infinispan 12&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 12 should bring the entire non blocking saga to its hopfully final completion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The aforementioned query modules need to be revamped&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Existing supported cache stores need to be rewritten to directly support non blocking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache retrieval needs to be offloaded to a blocking thread&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Combine server event loop with non blocking thread pool&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also if time permits the Infinispan Client would be ensured to be fully non blocking and
integrate with BlockHound to ensure client apps behave properly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>William Burns</name></author><category term="non-blocking" /><category term="server" /><category term="embedded" /><summary type="html">As many you are probably aware recent trends have shown that making applications non blocking provides quite a few benefits allowing for greater scalability with less resources. Infinispan has been written and rewriting parts to take advantage of this as we can for both embedded and server use cases.</summary></entry><entry><title type="html">The Developer Conference Sao Paulo</title><link href="https://infinispan.org/blog/2020/08/28/infinispan-tdc-sp" rel="alternate" type="text/html" title="The Developer Conference Sao Paulo" /><published>2020-08-28T13:00:00+01:00</published><updated>2020-08-28T13:00:00+01:00</updated><id>https://infinispan.org/blog/2020/08/28/infinispan-tdc-sp</id><content type="html" xml:base="https://infinispan.org/blog/2020/08/28/infinispan-tdc-sp">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-the-developers-conference&quot;&gt;What is The Developer’s Conference?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Developer’s Conference (TDC) is the largest event related to software development in Brazil connecting meetup and event organizers, speakers, companies and sponsors on a single platform, empowering the local ecosystem of each region it&amp;#8217;s realized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TDC is a very dynamic conference aimed to present the most important topics according to local and international needs and, for this reason, there are more than ten parallel tracks a day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This event takes place once a year in some cities in Brazil, but this year the event will be totally online due to COVID-19 impact.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Red Hat will be present on this event with 6 principal lectures and one room occurring simultaneously throughout the event.
We will have an Infinispan presentation showing some important features, what&amp;#8217;s new, demos and Quarkus integration at Red Hat sponsor room.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;when-the-infinispan-presentation-will-happen&quot;&gt;When the Infinispan presentation will happen?&lt;/h5&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch table&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Friday, 28th August&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Hour&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Timezone&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16h40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BRT (GMT-3)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17h40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;EDT (UTC-4)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;20h40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BST (UTC+1)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;21h40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CEST (UTC+2)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Gustavo Lira</name></author><category term="presentation" /><category term="quarkus" /><category term="event" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan Server Tutorial</title><link href="https://infinispan.org/blog/2020/07/28/infinispan-server-tutorial" rel="alternate" type="text/html" title="Infinispan Server Tutorial" /><published>2020-07-28T13:00:00+01:00</published><updated>2020-07-28T13:00:00+01:00</updated><id>https://infinispan.org/blog/2020/07/28/infinispan-server-tutorial</id><content type="html" xml:base="https://infinispan.org/blog/2020/07/28/infinispan-server-tutorial">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are wondering how to start with Infinispan Server from your Java Application,
a new &lt;a href=&quot;https://infinispan.org/infinispan-server-tutorial/&quot;&gt;Tutorial&lt;/a&gt; is available.
This tutorial covers the essentials to get started with Infinispan Server and
takes around half an hour to complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this tutorial you will learn how to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Run Infinispan Server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access and use the Infinispan Console.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create Infinispan caches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read and write data as primitive types and Java objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add lifespans to entries so data expires.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy client listeners to get event notifications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search the data store for specific values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use out-of-the-box testing with Junit 5 for verification.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Complete the tutorial, ask us anything about it, give us feedback
and feel free to share it!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Katia Aresti</name></author><category term="tutorial" /><category term="learning" /><category term="server" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan 12.0.0.Dev01</title><link href="https://infinispan.org/blog/2020/07/27/infinispan-12" rel="alternate" type="text/html" title="Infinispan 12.0.0.Dev01" /><published>2020-07-27T13:00:00+01:00</published><updated>2020-07-27T13:00:00+01:00</updated><id>https://infinispan.org/blog/2020/07/27/infinispan-12.0.0.Dev01</id><content type="html" xml:base="https://infinispan.org/blog/2020/07/27/infinispan-12">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first of our development releases of Infinispan 12 is here and it features our upgrade to &lt;a href=&quot;https://hibernate.org/search/&quot;&gt;Hibernate Search 6&lt;/a&gt; which finally allows us to upgrade to &lt;a href=&quot;https://lucene.apache.org/&quot;&gt;Lucene 8.x&lt;/a&gt;. We&amp;#8217;ve had to change a few things in our query implementation to accommodate the latest and greatest and to make the feature simpler to use. As expected, being a development release, there are some rough edges and we&amp;#8217;d really love &lt;strong&gt;YOUR&lt;/strong&gt; help in making sure that we get everything right for the final release later this year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12346555&quot;&gt;release notes&lt;/a&gt; to see what has changed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re hard at work on new features, improvements and fixes, so watch this space for more announcements!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><category term="development" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Introducing the Anchored Keys module</title><link href="https://infinispan.org/blog/2020/07/22/anchored-keys" rel="alternate" type="text/html" title="Introducing the Anchored Keys module" /><published>2020-07-22T13:00:00+01:00</published><updated>2020-07-22T13:00:00+01:00</updated><id>https://infinispan.org/blog/2020/07/22/anchored-keys</id><content type="html" xml:base="https://infinispan.org/blog/2020/07/22/anchored-keys">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan version 11 introduces an experimental module that allows scaling up a cluster and adding new nodes without expensive &lt;strong&gt;state transfer&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For background, the preferred way to scale up the storage capacity of a Infinispan cluster
is to use distributed caches.
A distributed cache stores each key/value pair on &lt;code&gt;num-owners&lt;/code&gt; nodes,
and each node can compute the location of a key (aka the key owners) directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan achieves this by statically mapping cache keys to &lt;code&gt;num-segments&lt;/code&gt; &lt;strong&gt;consistent hash segments&lt;/strong&gt;,
and then dynamically mapping segments to nodes based on the cache&amp;#8217;s &lt;strong&gt;topology&lt;/strong&gt;
(roughly the current plus the historical membership of the cache).
Whenever a new node joins the cluster, the cache is &lt;strong&gt;rebalanced&lt;/strong&gt;, and the new node replaces an existing node
as the owner of some segments.
The key/value pairs in those segments are copied to the new node and removed from the no-longer-owner node
via &lt;strong&gt;state transfer&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Because the allocation of segments to nodes is based on random UUIDs generated at start time,
it is common (though less so after
&lt;a href=&quot;https://issues.redhat.com/browse/ISPN-11679&quot;&gt;ISPN-11679&lt;/a&gt;
), for segments to also move from one old node to another old node.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The basic idea is to skip the static mapping of keys to segments and to map keys directly to nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a key/value pair is inserted into the cache,
the newest member becomes the &lt;strong&gt;anchor owner&lt;/strong&gt; of that key, and the only node storing the actual value.
In order to make the anchor location available without an extra remote lookup,
all the other nodes store a reference to the anchor owner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That way, when another node joins, it only needs to receive the location information from the existing nodes,
and values can stay on the anchor owner, minimizing the amount of traffic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Only one node can be added at a time&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An external actor (e.g. a Kubernetes/OpenShift operator, or a human administrator)
must monitor the load on the current nodes, and add a new node whenever the newest node
is close to &quot;full&quot;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Because the anchor owner information is replicated on all the nodes, and values are never moved off a node,
the memory usage of each node will keep growing as new entries and nodes are added.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;There is no redundancy&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Every value is stored on a single node.
When a node crashes or even stops gracefully, the values stored on that node are lost.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Transactions are not supported&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A later version may add transaction support, but the fact that any node stop or crash
loses entries makes transactions a lot less valuable compared to a distributed cache.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Hot Rod clients do not know the anchor owner&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Hot Rod clients cannot use the topology information from the servers to locate the anchor owner.
Instead, the server receiving a Hot Rod get request must make an additional request to the anchor owner
in order to retrieve the value.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The module is still very young and does not yet support many Infinispan features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually, if it proves useful, it may become another cache mode, just like scattered caches.
For now, configuring a cache with anchored keys requires a replicated cache with a custom element &lt;code&gt;anchored-keys&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;infinispan
      xmlns=&quot;urn:infinispan:config:11.0&quot;
      xmlns:anchored=&quot;urn:infinispan:config:anchored:11.0&quot;
      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
      xsi:schemaLocation=&quot;urn:infinispan:config:11.0
            https://infinispan.org/schemas/infinispan-config-11.0.xsd
            urn:infinispan:config:anchored:11.0
            https://infinispan.org/schemas/infinispan-anchored-config-11.0.xsd&quot;&amp;gt;

    &amp;lt;cache-container default-cache=&quot;default&quot;&amp;gt;
        &amp;lt;transport/&amp;gt;
        &amp;lt;replicated-cache name=&quot;default&quot;&amp;gt;
            &amp;lt;anchored:anchored-keys/&amp;gt;
        &amp;lt;/replicated-cache&amp;gt;
    &amp;lt;/cache-container&amp;gt;

&amp;lt;/infinispan&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the &lt;code&gt;&amp;lt;anchored-keys/&amp;gt;&lt;/code&gt; element is present, the module automatically enables anchored keys
and makes some required configuration changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Disables &lt;code&gt;await-initial-transfer&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enables conflict resolution with the equivalent of&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;partition-handling when-split=&quot;ALLOW_READ_WRITES&quot; merge-policy=&quot;PREFER_NON_NULL&quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cache will fail to start if these attributes are explicitly set to other values,
if state transfer is disabled, or if transactions are enabled.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;implementation-status&quot;&gt;Implementation status&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basic operations are implemented: &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;putIfAbsent&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;putAll&lt;/code&gt;, &lt;code&gt;getAll&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;functional-commands&quot;&gt;Functional commands&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;FunctionalMap&lt;/code&gt; API is not implemented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other operations that rely on the functional API&amp;#8217;s implementation do not work either: &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;compute&lt;/code&gt;,
&lt;code&gt;computeIfPresent&lt;/code&gt;, &lt;code&gt;computeIfAbsent&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;partition-handling&quot;&gt;Partition handling&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a node crashes, surviving nodes do not remove anchor references pointing to that node.
In theory, this could allow merges to skip conflict resolution, but currently the &lt;code&gt;PREFERRED_NON_NULL&lt;/code&gt;
merge policy is configured automatically and cannot be changed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;listeners&quot;&gt;Listeners&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cluster listeners and client listeners are implemented and receive the correct notifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Non-clustered embedded listeners currently receive notifications on all the nodes, not just the node
where the value is stored.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;performance-considerations&quot;&gt;Performance considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;clientserver-latency&quot;&gt;Client/Server Latency&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The client always contacts the primary owner, so any read has a
&lt;code&gt;(N-1)/N&lt;/code&gt; probability of requiring a unicast RPC from the primary to the anchor owner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Writes require the primary to send the value to one node and the anchor address
to all the other nodes, which is currently done with &lt;code&gt;N-1&lt;/code&gt; unicast RPCs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In theory we could send in parallel one unicast RPC for the value and one multicast RPC for the address,
but that would need additional logic to ignore the address on the anchor owner
and with TCP multicast RPCs are implemented as parallel unicasts anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;memory-overhead&quot;&gt;Memory overhead&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compared to a distributed cache with one owner, an anchored-keys cache
contains copies of all the keys and their locations, plus the overhead of the cache itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, a node with anchored-keys caches should stop accepting new entries when it has less than
&lt;code&gt;(&amp;lt;key size&amp;gt; + &amp;lt;per-key overhead&amp;gt;) * &amp;lt;number of entries not yet inserted&amp;gt;&lt;/code&gt; bytes available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The number of entries not yet inserted is obviously very hard to estimate.
In the future we may provide a way to limit the overhead of key location information,
e.g. by using a distributed cache.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The per-key overhead is lowest for off-heap storage, around 63 bytes:
8 bytes for the entry reference in &lt;code&gt;MemoryAddressHash.memory&lt;/code&gt;,
29 bytes for the off-heap entry header,
and 26 bytes for the serialized &lt;code&gt;RemoteMetadata&lt;/code&gt; with the owner&amp;#8217;s address.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The per-key overhead of the ConcurrentHashMap-based on-heap cache,
assuming a 64-bit JVM with compressed OOPS, would be around 92 bytes:
32 bytes for &lt;code&gt;ConcurrentHashMap.Node&lt;/code&gt;, 32 bytes for &lt;code&gt;MetadataImmortalCacheEntry&lt;/code&gt;,
24 bytes for &lt;code&gt;RemoteMetadata&lt;/code&gt;, and 4 bytes in the &lt;code&gt;ConcurrentHashMap.table&lt;/code&gt; array.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;state-transfer&quot;&gt;State transfer&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;State transfer does not transfer the actual values, but it still needs
to transfer all the keys and the anchor owner information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assuming that the values are much bigger compared to the keys,
the anchor cache&amp;#8217;s state transfer should also be much faster
compared to the state transfer of a distributed cache of a similar size.
But for small values, there may not be a visible improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The initial state transfer does not block a joiner from starting,
because it will just ask another node for the anchor owner.
However, the remote lookups can be expensive, especially in embedded mode,
but also in server mode, if the client is not &lt;code&gt;HASH_DISTRIBUTION_AWARE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Dan Berindei</name></author><category term="anchored keys" /><category term="state transfer" /><summary type="html">Infinispan version 11 introduces an experimental module that allows scaling up a cluster and adding new nodes without expensive state transfer.</summary></entry></feed>